from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import db
from keyboards.main_menu import get_main_menu, get_faq_keyboard, get_back_to_menu_keyboard, get_anonymous_post_keyboard
from models.user import UserRole
from config import ADMIN_IDS, CHANNEL_ID
from aiogram import Bot
import asyncio
import logging

router = Router()

class AnnouncementState(StatesGroup):
    waiting_for_announcement = State()

class AnonymousPostState(StatesGroup):
    waiting_for_post = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü–æ–¥—Å–ª—É—à–∞–Ω–æ*!

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏, –ø—Ä–∏–∑–Ω–∞–Ω–∏—è–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏. –í—Å—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ! ‚ú®

*–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:*
üì® ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ—Å—Ç
ü§´ ‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–µ–∫—Ä–µ—Ç–æ–º
üíå ‚Ä¢ –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ
üìñ ‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá
    """
    
    await message.answer(
        welcome_text,
        reply_markup=await get_main_menu(message.from_user.id),
        parse_mode="Markdown"
    )

@router.message(F.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–∫—É")
async def start_anonymous_post(message: Message, state: FSMContext):
    await message.answer(
        "üìù *–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ—Å—Ç*\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ. "
        "–ü–æ—Å—Ç –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!\n\n"
        "*–ü—Ä–∞–≤–∏–ª–∞:*\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ë–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –ë–µ–∑ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ 'üîô –û—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è",
        reply_markup=get_anonymous_post_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AnonymousPostState.waiting_for_post)

@router.message(AnonymousPostState.waiting_for_post)
async def process_anonymous_post(message: Message, state: FSMContext, bot: Bot):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.",
            reply_markup=await get_main_menu(message.from_user.id)
        )
        await state.clear()
        return
    
    post_text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(post_text) < 10:
        await message.answer(
            "‚ùå –ü–æ—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ 'üîô –û—Ç–º–µ–Ω–∞':",
            reply_markup=get_anonymous_post_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    forbidden_words = ["–º–∞—Ç", "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "—Å–ø–∞–º"]  # –î–æ–±–∞–≤—å —Å–≤–æ–∏
    if any(word in post_text.lower() for word in forbidden_words):
        await message.answer(
            "‚ùå –í –ø–æ—Å—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ 'üîô –û—Ç–º–µ–Ω–∞':",
            reply_markup=get_anonymous_post_keyboard()
        )
        return
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=f"üíå *–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ:*\n\n{post_text}\n\n#–ø–æ–¥—Å–ª—É—à–∞–Ω–æ",
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        post_id = await db.create_anonymous_post(message.from_user.id, post_text)
        
        await message.answer(
            "‚úÖ *–¢–≤–æ–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!*\n\n"
            "–¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ üî•\n\n"
            "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=await get_main_menu(message.from_user.id),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=await get_main_menu(message.from_user.id),
            parse_mode="Markdown"
        )
    
    await state.clear()

@router.message(Command("announcement"))
async def announcement_command(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return
    
    await message.answer(
        "üì¢ *–ü–∞–Ω–µ–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        parse_mode="Markdown"
    )
    await state.set_state(AnnouncementState.waiting_for_announcement)

@router.message(AnnouncementState.waiting_for_announcement)
async def process_announcement(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        await state.clear()
        return
    
    announcement_text = message.text
    all_users = await db.get_all_users()
    total_users = len(all_users)
    
    if total_users == 0:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        await state.clear()
        return
    
    progress_msg = await message.answer(
        f"üì§ *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}",
        parse_mode="Markdown"
    )
    
    success_count = 0
    announcement_message = f"üì¢ *–û–ë–™–Ø–í–õ–ï–ù–ò–ï*\n\n{announcement_text}\n\n_–û—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ_"
    
    for i, user_id in enumerate(all_users):
        try:
            await bot.send_message(user_id, text=announcement_message, parse_mode="Markdown")
            success_count += 1
        except:
            pass
        
        if (i + 1) % 10 == 0:
            try:
                await progress_msg.edit_text(
                    f"üì§ *–†–∞—Å—Å—ã–ª–∫–∞...*\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i + 1}/{total_users}",
                    parse_mode="Markdown"
                )
            except:
                pass
        
        await asyncio.sleep(0.05)
    
    await message.answer(
        f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}/{total_users}",
        parse_mode="Markdown"
    )
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.message(F.text == "‚ùì –§–ê–ö")
async def show_faq(message: Message):
    faq_text = "‚ÑπÔ∏è *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    await message.answer(faq_text, reply_markup=get_faq_keyboard(), parse_mode="Markdown")

@router.message(F.text == "üìã –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: Message):
    rules_text = """
üìã *–ü—Ä–∞–≤–∏–ª–∞ –ü–æ–¥—Å–ª—É—à–∞–Ω–æ*:

‚úÖ *–ú–æ–∂–Ω–æ:*
‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è
‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏ –∏–∑ —à–∫–æ–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –∏ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã

‚ùå *–ù–µ–ª—å–∑—è:*
‚Ä¢ –í—Å—ë –º–æ–∂–Ω–æ, –Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥—Ä–µ—Å–∏–≤–Ω—ã–º –∏–ª–∏ –Ω–µ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ –∫–∞–Ω–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ —É–¥–∞–ª–µ–Ω–Ω–æ
    """
    await message.answer(rules_text, parse_mode="Markdown")

@router.callback_query(F.data.startswith("faq_"))
async def handle_faq_questions(callback: CallbackQuery):
    faq_type = callback.data
    faq_answers = {
        "faq_what_is": "ü§î *–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–æ–Ω–∏–º–∫–∞?*\n\n–ê–Ω–æ–Ω–∏–º–∫–∞ - —ç—Ç–æ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏! üîí",
        "faq_how_to_send": "üìù *–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç?*\n\n1. –ù–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–∫—É'\n2. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç\n3. –ü–æ—Å—Ç —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ! ‚ú®",
        "faq_time": "‚è∞ *–°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?*\n\n–ü–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ! ‚ö°",
        "faq_rejection": "üö´ *–ü–æ—á–µ–º—É –ø–æ—Å—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏?*\n\n–ü–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞—Ä—É—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞."
    }
    answer = faq_answers.get(faq_type, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await callback.message.edit_text(answer, reply_markup=get_back_to_menu_keyboard(), parse_mode="Markdown")

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await get_main_menu(callback.from_user.id))

@router.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await get_main_menu(message.from_user.id))